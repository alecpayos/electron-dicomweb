{"version":3,"file":"471.bundle.c54e79abf329e47b5342.js","mappings":"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","sources":["webpack:///../../../extensions/cornerstone-dicom-rt/src/utils/promptHydrateRT.ts","webpack:///../../../extensions/cornerstone-dicom-rt/src/utils/initRTToolGroup.ts","webpack:///../../../extensions/cornerstone-dicom-rt/src/viewports/OHIFCornerstoneRTViewport.tsx","webpack:///../../../extensions/cornerstone-dicom-rt/src/viewports/_getStatusComponent.tsx"],"sourcesContent":["import { ButtonEnums } from '@ohif/ui';\n\nconst RESPONSE = {\n  NO_NEVER: -1,\n  CANCEL: 0,\n  HYDRATE_SEG: 5,\n};\n\nfunction promptHydrateRT({\n  servicesManager,\n  rtDisplaySet,\n  viewportId,\n  toolGroupId = 'default',\n  preHydrateCallbacks,\n  hydrateRTDisplaySet,\n}) {\n  const { uiViewportDialogService } = servicesManager.services;\n\n  return new Promise(async function (resolve, reject) {\n    const promptResult = await _askHydrate(uiViewportDialogService, viewportId);\n\n    if (promptResult === RESPONSE.HYDRATE_SEG) {\n      preHydrateCallbacks?.forEach(callback => {\n        callback();\n      });\n\n      const isHydrated = await hydrateRTDisplaySet({\n        rtDisplaySet,\n        viewportId,\n        toolGroupId,\n        servicesManager,\n      });\n\n      resolve(isHydrated);\n    }\n  });\n}\n\nfunction _askHydrate(uiViewportDialogService, viewportId) {\n  return new Promise(function (resolve, reject) {\n    const message = 'Do you want to open this Segmentation?';\n    const actions = [\n      {\n        type: ButtonEnums.type.secondary,\n        text: 'No',\n        value: RESPONSE.CANCEL,\n      },\n      {\n        type: ButtonEnums.type.primary,\n        text: 'Yes',\n        value: RESPONSE.HYDRATE_SEG,\n      },\n    ];\n    const onSubmit = result => {\n      uiViewportDialogService.hide();\n      resolve(result);\n    };\n\n    uiViewportDialogService.show({\n      viewportId,\n      type: 'info',\n      message,\n      actions,\n      onSubmit,\n      onOutsideClick: () => {\n        uiViewportDialogService.hide();\n        resolve(RESPONSE.CANCEL);\n      },\n    });\n  });\n}\n\nexport default promptHydrateRT;\n","function createRTToolGroupAndAddTools(ToolGroupService, customizationService, toolGroupId) {\n  const { tools } = customizationService.get('cornerstone.overlayViewportTools') ?? {};\n\n  return ToolGroupService.createToolGroupAndAddTools(toolGroupId, tools);\n}\n\nexport default createRTToolGroupAndAddTools;\n","import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport OHIF, { utils } from '@ohif/core';\nimport { ViewportActionBar, useViewportGrid, LoadingIndicatorTotalPercent } from '@ohif/ui';\n\nimport promptHydrateRT from '../utils/promptHydrateRT';\nimport _getStatusComponent from './_getStatusComponent';\nimport createRTToolGroupAndAddTools from '../utils/initRTToolGroup';\n\nconst { formatDate } = utils;\nconst RT_TOOLGROUP_BASE_NAME = 'RTToolGroup';\n\nfunction OHIFCornerstoneRTViewport(props) {\n  const {\n    children,\n    displaySets,\n    viewportOptions,\n    viewportLabel,\n    servicesManager,\n    extensionManager,\n    commandsManager,\n  } = props;\n\n  const {\n    displaySetService,\n    toolGroupService,\n    segmentationService,\n    uiNotificationService,\n    customizationService,\n  } = servicesManager.services;\n\n  const viewportId = viewportOptions.viewportId;\n\n  const toolGroupId = `${RT_TOOLGROUP_BASE_NAME}-${viewportId}`;\n\n  // RT viewport will always have a single display set\n  if (displaySets.length > 1) {\n    throw new Error('RT viewport should only have a single display set');\n  }\n\n  const rtDisplaySet = displaySets[0];\n\n  const [viewportGrid, viewportGridService] = useViewportGrid();\n\n  // States\n  const [isToolGroupCreated, setToolGroupCreated] = useState(false);\n  const [selectedSegment, setSelectedSegment] = useState(1);\n\n  // Hydration means that the RT is opened and segments are loaded into the\n  // segmentation panel, and RT is also rendered on any viewport that is in the\n  // same frameOfReferenceUID as the referencedSeriesUID of the RT. However,\n  // loading basically means RT loading over network and bit unpacking of the\n  // RT data.\n  const [isHydrated, setIsHydrated] = useState(rtDisplaySet.isHydrated);\n  const [rtIsLoading, setRtIsLoading] = useState(!rtDisplaySet.isLoaded);\n  const [element, setElement] = useState(null);\n  const [processingProgress, setProcessingProgress] = useState({\n    percentComplete: null,\n    totalSegments: null,\n  });\n\n  // refs\n  const referencedDisplaySetRef = useRef(null);\n\n  const { viewports, activeViewportId } = viewportGrid;\n\n  const referencedDisplaySet = rtDisplaySet.getReferenceDisplaySet();\n  const referencedDisplaySetMetadata = _getReferencedDisplaySetMetadata(referencedDisplaySet);\n\n  referencedDisplaySetRef.current = {\n    displaySet: referencedDisplaySet,\n    metadata: referencedDisplaySetMetadata,\n  };\n  /**\n   * OnElementEnabled callback which is called after the cornerstoneExtension\n   * has enabled the element. Note: we delegate all the image rendering to\n   * cornerstoneExtension, so we don't need to do anything here regarding\n   * the image rendering, element enabling etc.\n   */\n  const onElementEnabled = evt => {\n    setElement(evt.detail.element);\n  };\n\n  const onElementDisabled = () => {\n    setElement(null);\n  };\n\n  const storePresentationState = useCallback(() => {\n    viewportGrid?.viewports.forEach(({ viewportId }) => {\n      commandsManager.runCommand('storePresentation', {\n        viewportId,\n      });\n    });\n  }, [viewportGrid]);\n\n  const hydrateRTDisplaySet = ({ rtDisplaySet, viewportId }) => {\n    commandsManager.runCommand('loadSegmentationDisplaySetsForViewport', {\n      displaySets: [rtDisplaySet],\n      viewportId,\n    });\n  };\n\n  const getCornerstoneViewport = useCallback(() => {\n    const { component: Component } = extensionManager.getModuleEntry(\n      '@ohif/extension-cornerstone.viewportModule.cornerstone'\n    );\n\n    const { displaySet: referencedDisplaySet } = referencedDisplaySetRef.current;\n\n    // Todo: jump to the center of the first segment\n    return (\n      <Component\n        {...props}\n        displaySets={[referencedDisplaySet, rtDisplaySet]}\n        viewportOptions={{\n          viewportType: 'volume',\n          toolGroupId: toolGroupId,\n          orientation: viewportOptions.orientation,\n          viewportId: viewportOptions.viewportId,\n        }}\n        onElementEnabled={onElementEnabled}\n        onElementDisabled={onElementDisabled}\n      ></Component>\n    );\n  }, [viewportId, rtDisplaySet, toolGroupId]);\n\n  const onSegmentChange = useCallback(\n    direction => {\n      direction = direction === 'left' ? -1 : 1;\n      const segmentationId = rtDisplaySet.displaySetInstanceUID;\n      const segmentation = segmentationService.getSegmentation(segmentationId);\n\n      const { segments } = segmentation;\n\n      const numberOfSegments = Object.keys(segments).length;\n\n      let newSelectedSegmentIndex = selectedSegment + direction;\n\n      // Segment 0 is always background\n      if (newSelectedSegmentIndex >= numberOfSegments - 1) {\n        newSelectedSegmentIndex = 1;\n      } else if (newSelectedSegmentIndex === 0) {\n        newSelectedSegmentIndex = numberOfSegments - 1;\n      }\n\n      segmentationService.jumpToSegmentCenter(segmentationId, newSelectedSegmentIndex, toolGroupId);\n      setSelectedSegment(newSelectedSegmentIndex);\n    },\n    [selectedSegment]\n  );\n\n  useEffect(() => {\n    if (rtIsLoading) {\n      return;\n    }\n\n    promptHydrateRT({\n      servicesManager,\n      viewportId,\n      rtDisplaySet,\n      preHydrateCallbacks: [storePresentationState],\n      hydrateRTDisplaySet,\n    }).then(isHydrated => {\n      if (isHydrated) {\n        setIsHydrated(true);\n      }\n    });\n  }, [servicesManager, viewportId, rtDisplaySet, rtIsLoading]);\n\n  useEffect(() => {\n    const { unsubscribe } = segmentationService.subscribe(\n      segmentationService.EVENTS.SEGMENTATION_LOADING_COMPLETE,\n      evt => {\n        if (evt.rtDisplaySet.displaySetInstanceUID === rtDisplaySet.displaySetInstanceUID) {\n          setRtIsLoading(false);\n        }\n\n        if (evt.overlappingSegments) {\n          uiNotificationService.show({\n            title: 'Overlapping Segments',\n            message: 'Overlapping segments detected which is not currently supported',\n            type: 'warning',\n          });\n        }\n      }\n    );\n\n    return () => {\n      unsubscribe();\n    };\n  }, [rtDisplaySet]);\n\n  useEffect(() => {\n    const { unsubscribe } = segmentationService.subscribe(\n      segmentationService.EVENTS.SEGMENT_LOADING_COMPLETE,\n      ({ percentComplete, numSegments }) => {\n        setProcessingProgress({\n          percentComplete,\n          totalSegments: numSegments,\n        });\n      }\n    );\n\n    return () => {\n      unsubscribe();\n    };\n  }, [rtDisplaySet]);\n\n  /**\n   Cleanup the SEG viewport when the viewport is destroyed\n   */\n  useEffect(() => {\n    const onDisplaySetsRemovedSubscription = displaySetService.subscribe(\n      displaySetService.EVENTS.DISPLAY_SETS_REMOVED,\n      ({ displaySetInstanceUIDs }) => {\n        const activeViewport = viewports.get(activeViewportId);\n        if (displaySetInstanceUIDs.includes(activeViewport.displaySetInstanceUID)) {\n          viewportGridService.setDisplaySetsForViewport({\n            viewportId: activeViewportId,\n            displaySetInstanceUIDs: [],\n          });\n        }\n      }\n    );\n\n    return () => {\n      onDisplaySetsRemovedSubscription.unsubscribe();\n    };\n  }, []);\n\n  useEffect(() => {\n    let toolGroup = toolGroupService.getToolGroup(toolGroupId);\n\n    if (toolGroup) {\n      return;\n    }\n\n    toolGroup = createRTToolGroupAndAddTools(toolGroupService, customizationService, toolGroupId);\n\n    setToolGroupCreated(true);\n\n    return () => {\n      // remove the segmentation representations if seg displayset changed\n      segmentationService.removeSegmentationRepresentationFromToolGroup(toolGroupId);\n\n      toolGroupService.destroyToolGroup(toolGroupId);\n    };\n  }, []);\n\n  useEffect(() => {\n    setIsHydrated(rtDisplaySet.isHydrated);\n\n    return () => {\n      // remove the segmentation representations if seg displayset changed\n      segmentationService.removeSegmentationRepresentationFromToolGroup(toolGroupId);\n      referencedDisplaySetRef.current = null;\n    };\n  }, [rtDisplaySet]);\n\n  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  let childrenWithProps = null;\n\n  if (\n    !referencedDisplaySetRef.current ||\n    referencedDisplaySet.displaySetInstanceUID !==\n      referencedDisplaySetRef.current.displaySet.displaySetInstanceUID\n  ) {\n    return null;\n  }\n\n  if (children && children.length) {\n    childrenWithProps = children.map((child, index) => {\n      return (\n        child &&\n        React.cloneElement(child, {\n          viewportId,\n          key: index,\n        })\n      );\n    });\n  }\n\n  const {\n    PatientID,\n    PatientName,\n    PatientSex,\n    PatientAge,\n    SliceThickness,\n    ManufacturerModelName,\n    StudyDate,\n    SeriesDescription,\n    SpacingBetweenSlices,\n    SeriesNumber,\n  } = referencedDisplaySetRef.current.metadata;\n\n  const onStatusClick = async () => {\n    // Before hydrating a RT and make it added to all viewports in the grid\n    // that share the same frameOfReferenceUID, we need to store the viewport grid\n    // presentation state, so that we can restore it after hydrating the RT. This is\n    // required if the user has changed the viewport (other viewport than RT viewport)\n    // presentation state (w/l and invert) and then opens the RT. If we don't store\n    // the presentation state, the viewport will be reset to the default presentation\n    storePresentationState();\n    const isHydrated = await hydrateRTDisplaySet({\n      rtDisplaySet,\n      viewportId,\n    });\n\n    setIsHydrated(isHydrated);\n  };\n\n  return (\n    <>\n      <ViewportActionBar\n        onDoubleClick={evt => {\n          evt.stopPropagation();\n          evt.preventDefault();\n        }}\n        onArrowsClick={onSegmentChange}\n        getStatusComponent={() => {\n          return _getStatusComponent({\n            isHydrated,\n            onStatusClick,\n          });\n        }}\n        studyData={{\n          label: viewportLabel,\n          useAltStyling: true,\n          studyDate: formatDate(StudyDate),\n          currentSeries: SeriesNumber,\n          seriesDescription: `RT Viewport ${SeriesDescription}`,\n          patientInformation: {\n            patientName: PatientName ? OHIF.utils.formatPN(PatientName.Alphabetic) : '',\n            patientSex: PatientSex || '',\n            patientAge: PatientAge || '',\n            MRN: PatientID || '',\n            thickness: SliceThickness ? `${SliceThickness.toFixed(2)}mm` : '',\n            spacing:\n              SpacingBetweenSlices !== undefined ? `${SpacingBetweenSlices.toFixed(2)}mm` : '',\n            scanner: ManufacturerModelName || '',\n          },\n        }}\n      />\n\n      <div className=\"relative flex h-full w-full flex-row overflow-hidden\">\n        {rtIsLoading && (\n          <LoadingIndicatorTotalPercent\n            className=\"h-full w-full\"\n            totalNumbers={processingProgress.totalSegments}\n            percentComplete={processingProgress.percentComplete}\n            loadingText=\"Loading RTSTRUCT...\"\n          />\n        )}\n        {getCornerstoneViewport()}\n        {childrenWithProps}\n      </div>\n    </>\n  );\n}\n\nOHIFCornerstoneRTViewport.propTypes = {\n  displaySets: PropTypes.arrayOf(PropTypes.object),\n  viewportId: PropTypes.string.isRequired,\n  dataSource: PropTypes.object,\n  children: PropTypes.node,\n  customProps: PropTypes.object,\n};\n\nOHIFCornerstoneRTViewport.defaultProps = {\n  customProps: {},\n};\n\nfunction _getReferencedDisplaySetMetadata(referencedDisplaySet) {\n  const image0 = referencedDisplaySet.images[0];\n  const referencedDisplaySetMetadata = {\n    PatientID: image0.PatientID,\n    PatientName: image0.PatientName,\n    PatientSex: image0.PatientSex,\n    PatientAge: image0.PatientAge,\n    SliceThickness: image0.SliceThickness,\n    StudyDate: image0.StudyDate,\n    SeriesDescription: image0.SeriesDescription,\n    SeriesInstanceUID: image0.SeriesInstanceUID,\n    SeriesNumber: image0.SeriesNumber,\n    ManufacturerModelName: image0.ManufacturerModelName,\n    SpacingBetweenSlices: image0.SpacingBetweenSlices,\n  };\n\n  return referencedDisplaySetMetadata;\n}\n\nexport default OHIFCornerstoneRTViewport;\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Icon, Tooltip } from '@ohif/ui';\n\nexport default function _getStatusComponent({ isHydrated, onStatusClick }) {\n  let ToolTipMessage = null;\n  let StatusIcon = null;\n\n  const { t } = useTranslation('Common');\n  const loadStr = t('LOAD');\n\n  switch (isHydrated) {\n    case true:\n      StatusIcon = () => <Icon name=\"status-alert\" />;\n\n      ToolTipMessage = () => <div>This Segmentation is loaded in the segmentation panel</div>;\n      break;\n    case false:\n      StatusIcon = () => (\n        <Icon\n          className=\"text-aqua-pale\"\n          name=\"status-untracked\"\n        />\n      );\n\n      ToolTipMessage = () => <div>Click LOAD to load RTSTRUCT.</div>;\n  }\n\n  const StatusArea = () => (\n    <div className=\"flex h-6 cursor-default text-sm leading-6 text-white\">\n      <div className=\"bg-customgray-100 flex min-w-[45px] items-center rounded-l-xl rounded-r p-1\">\n        <StatusIcon />\n        <span className=\"ml-1\">RTSTRUCT</span>\n      </div>\n      {!isHydrated && (\n        <div\n          className=\"bg-primary-main hover:bg-primary-light ml-1 cursor-pointer rounded px-1.5 hover:text-black\"\n          // Using onMouseUp here because onClick is not working when the viewport is not active and is styled with pointer-events:none\n          onMouseUp={onStatusClick}\n        >\n          {loadStr}\n        </div>\n      )}\n    </div>\n  );\n\n  return (\n    <>\n      {ToolTipMessage && (\n        <Tooltip\n          content={<ToolTipMessage />}\n          position=\"bottom-left\"\n        >\n          <StatusArea />\n        </Tooltip>\n      )}\n      {!ToolTipMessage && <StatusArea />}\n    </>\n  );\n}\n"],"names":["RESPONSE","NO_NEVER","CANCEL","HYDRATE_SEG","_ref","servicesManager","rtDisplaySet","viewportId","toolGroupId","preHydrateCallbacks","hydrateRTDisplaySet","uiViewportDialogService","services","Promise","async","resolve","reject","promptResult","message","actions","type","ButtonEnums","secondary","text","value","primary","onSubmit","result","hide","show","onOutsideClick","_askHydrate","forEach","callback","ToolGroupService","customizationService","tools","get","createToolGroupAndAddTools","formatDate","utils","OHIFCornerstoneRTViewport","props","children","displaySets","viewportOptions","viewportLabel","extensionManager","commandsManager","displaySetService","toolGroupService","segmentationService","uiNotificationService","length","Error","viewportGrid","viewportGridService","useViewportGrid","isToolGroupCreated","setToolGroupCreated","useState","selectedSegment","setSelectedSegment","isHydrated","setIsHydrated","rtIsLoading","setRtIsLoading","isLoaded","element","setElement","processingProgress","setProcessingProgress","percentComplete","totalSegments","referencedDisplaySetRef","useRef","viewports","activeViewportId","referencedDisplaySet","getReferenceDisplaySet","referencedDisplaySetMetadata","image0","images","PatientID","PatientName","PatientSex","PatientAge","SliceThickness","StudyDate","SeriesDescription","SeriesInstanceUID","SeriesNumber","ManufacturerModelName","SpacingBetweenSlices","_getReferencedDisplaySetMetadata","current","displaySet","metadata","onElementEnabled","evt","detail","onElementDisabled","storePresentationState","useCallback","runCommand","_ref2","getCornerstoneViewport","component","Component","getModuleEntry","React","_extends","viewportType","orientation","onSegmentChange","direction","segmentationId","displaySetInstanceUID","segmentation","getSegmentation","segments","numberOfSegments","Object","keys","newSelectedSegmentIndex","jumpToSegmentCenter","useEffect","promptHydrateRT","then","unsubscribe","subscribe","EVENTS","SEGMENTATION_LOADING_COMPLETE","overlappingSegments","title","SEGMENT_LOADING_COMPLETE","_ref3","numSegments","onDisplaySetsRemovedSubscription","DISPLAY_SETS_REMOVED","_ref4","displaySetInstanceUIDs","activeViewport","includes","setDisplaySetsForViewport","toolGroup","getToolGroup","createRTToolGroupAndAddTools","removeSegmentationRepresentationFromToolGroup","destroyToolGroup","childrenWithProps","map","child","index","key","onStatusClick","ViewportActionBar","onDoubleClick","stopPropagation","preventDefault","onArrowsClick","getStatusComponent","ToolTipMessage","StatusIcon","t","useTranslation","loadStr","Icon","name","className","StatusArea","onMouseUp","Tooltip","content","position","_getStatusComponent","studyData","label","useAltStyling","studyDate","currentSeries","seriesDescription","patientInformation","patientName","OHIF","formatPN","Alphabetic","patientSex","patientAge","MRN","thickness","toFixed","spacing","undefined","scanner","LoadingIndicatorTotalPercent","totalNumbers","loadingText","propTypes","PropTypes","isRequired","dataSource","customProps","defaultProps"],"sourceRoot":""}